name: Check for Snapcast Updates

on:
  schedule:
    # Run every day at 03:00 UTC
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get latest Snapcast version
        id: version
        run: |
          # Get the latest release version from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/badaix/snapcast/releases/latest | jq -r '.tag_name')
          echo "Latest Snapcast version: $LATEST_VERSION"
          
          # Get current version from the makefile
          CURRENT_VERSION=$(grep 'SNAPCAST_VERSION = ' buildroot-external/package/snapcast/snapcast.mk | cut -d'=' -f2 | xargs)
          echo "Current Snapcast version: $CURRENT_VERSION"
          
          # Compare versions
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "New version available: $LATEST_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            
            # Create a branch name with the new version
            BRANCH_NAME="update/snapcast-${LATEST_VERSION#v}"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            echo "No new version available"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version and create PR
        if: steps.version.outputs.version_changed == 'true'
        run: |
          # Create a new branch
          git checkout -b ${{ steps.version.outputs.branch_name }}
          
          # Update the version in the makefile
          sed -i "s/SNAPCAST_VERSION = .*/SNAPCAST_VERSION = ${{ steps.version.outputs.new_version }}/" buildroot-external/package/snapcast/snapcast.mk
          
          # Commit the changes
          git add buildroot-external/package/snapcast/snapcast.mk
          git commit -m "Update Snapcast to ${{ steps.version.outputs.new_version }}"
          
          # Push the branch
          git push -u origin ${{ steps.version.outputs.branch_name }}
          
          # Create PR
          gh pr create \
            --title "Update Snapcast to ${{ steps.version.outputs.new_version }}" \
            --body "This PR updates Snapcast from $CURRENT_VERSION to ${{ steps.version.outputs.new_version }}" \
            --base main \
            --head ${{ steps.version.outputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
